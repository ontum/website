---
import Container from "@components/container.astro";
import Link from "@components/ui/link.astro";
import Dropdown from "./dropdown.astro";
import { Astronav, MenuItems, MenuIcon } from "astro-navbar";
import { Image } from "astro:assets";

const menuitems = [
  // {
  //   title: "Features",
  //   path: "#",
  //   children: [
  //     { title: "Action", path: "/" },
  //     { title: "Another action", path: "#" },
  //     { title: "Dropdown Submenu", path: "#" },
  //     { title: "404 Page", path: "/404" },
  //   ],
  // },
  {
    title: "Home",
    path: "/",
    children: false,
  },
  {
    title: "Product",
    path: "/products",
  },
  // {
  //   title: "Pricing",
  //   path: "/pricing",
  // },
  {
    title: "About",
    path: "/about",
    children: false,
  },
  // {
  //   title: "Blog",
  //   path: "/blog",
  // },
  {
    title: "Contact",
    path: "/contact",
    children: false,
  },
];
---

<script>
  const navInit = () => {
    // Mobile nav toggle
    const menuButton = document.getElementById("astronav-menu");
    menuButton && menuButton.addEventListener("click", toggleMobileNav);

    // Dropdown menus
    const dropdownMenus = document.querySelectorAll(".astronav-dropdown");
    dropdownMenus.forEach((menu) => {
      const button = menu.querySelector("button");
      button &&
        button.addEventListener("click", (event) =>
          toggleDropdownMenu(event, menu, dropdownMenus)
        );

      // Handle Submenu Dropdowns
      const dropDownSubmenus = menu.querySelectorAll(
        ".astronav-dropdown-submenu"
      );

      dropDownSubmenus.forEach((submenu) => {
        const submenuButton = submenu.querySelector("button");
        submenuButton &&
          submenuButton.addEventListener("click", (event) => {
            event.stopImmediatePropagation();
            console.log("click");
            toggleSubmenuDropdown(event, submenu);
          });
      });
    });

    // Clicking away from dropdown will remove the dropdown class
    document.addEventListener("click", closeAllDropdowns);

    function toggleMobileNav() {
      [...document.querySelectorAll(".astronav-toggle")].forEach((el) => {
        el.classList.toggle("hidden");
      });
    }

    function toggleDropdownMenu(event, menu, dropdownMenus) {
      toggleMenu(menu);

      // Close one dropdown when selecting another
      Array.from(dropdownMenus)
        .filter((el) => el !== menu && !menu.contains(el))
        .forEach(closeMenu);

      event.stopPropagation();
    }

    function toggleSubmenuDropdown(event, submenu) {
      event.stopPropagation();
      toggleMenu(submenu);

      // Close sibling submenus at the same nesting level
      const siblingSubmenus = submenu
        .closest(".astronav-dropdown")
        .querySelectorAll(".astronav-dropdown-submenu");
      Array.from(siblingSubmenus)
        .filter((el) => el !== submenu && !submenu.contains(el))
        .forEach(closeMenu);
    }

    function closeAllDropdowns(event) {
      const dropdownMenus = document.querySelectorAll(".dropdown-toggle");
      const dropdownParent = document.querySelectorAll(
        ".astronav-dropdown, .astronav-dropdown-submenu"
      );
      const isButtonInsideDropdown = [
        ...document.querySelectorAll(
          ".astronav-dropdown button, .astronav-dropdown-submenu button, #astronav-menu"
        ),
      ].some((button) => button.contains(event.target));
      if (!isButtonInsideDropdown) {
        dropdownMenus.forEach((d) => {
          // if (!d.contains(event.target)) {
          d.classList.remove("open");
          d.removeAttribute("open");
          d.classList.add("hidden");
          // }
        });
        dropdownParent.forEach((d) => {
          d.classList.remove("open");
          d.removeAttribute("open");
          d.setAttribute("aria-expanded", "false");
        });
      }
    }

    function toggleMenu(menu) {
      menu.classList.toggle("open");
      const expanded = menu.getAttribute("aria-expanded") === "true";
      menu.setAttribute("aria-expanded", expanded ? "false" : "true");
      menu.hasAttribute("open")
        ? menu.removeAttribute("open")
        : menu.setAttribute("open", "");

      const dropdownToggle = menu.querySelector(".dropdown-toggle");
      const dropdownExpanded = dropdownToggle.getAttribute("aria-expanded");
      dropdownToggle.classList.toggle("hidden");
      dropdownToggle.setAttribute(
        "aria-expanded",
        dropdownExpanded === "true" ? "false" : "true"
      );
    }

    function closeMenu(menu) {
      console.log("closing", menu);
      menu.classList.remove("open");
      menu.removeAttribute("open");
      menu.setAttribute("aria-expanded", "false");
      const dropdownToggles = menu.querySelectorAll(".dropdown-toggle");
      dropdownToggles.forEach((toggle) => {
        toggle.classList.add("hidden");
        toggle.setAttribute("aria-expanded", "false");
      });
    }
  };

  document.addEventListener("astro:after-swap", navInit);
</script>

<Container>
  <div class="w-full flex justify-center">
    <header class="bg-white fixed shadow-sm rounded-lg w-full md:px-10 z-[500]">
      <div class="flex flex-col lg:flex-row justify-between items-center p-2">
        <Astronav>
          <div class="flex w-full lg:w-auto items-center justify-between">
            <a href="/" class="text-lg flex">
              <Image
                src="/ontum_logo.png"
                alt="Ontum Logo"
                width="50"
                height="50"
                class="w-12 h-12 md:w-16 md:h-16"
                loading="eager"
              />
              <div class="p-2 text-sm md:text-xl">
                <span class="font-bold text-ontum-blue">Ontum</span>
                <br />
                <span class="text-slate-500">Education</span>
              </div>
            </a>
            <div class="block lg:hidden">
              <MenuIcon class="w-6 h-6 text-gray-800 mr-5" />
            </div>
          </div>
          <MenuItems class="hidden w-full lg:w-auto mt-2 lg:flex lg:mt-0">
            <ul class="flex flex-col lg:flex-row lg:gap-3">
              {
                menuitems.map((item, index) => (
                  <>
                    {item?.children && (
                      <Dropdown
                        title={item.title}
                        children={item.children}
                        lastItem={index === menuitems.length - 1}
                      />
                    )}

                    {!item?.children && (
                      <li>
                        <a
                          href={item.path}
                          class="flex lg:px-3 py-2 text-gray-600 hover:text-gray-900"
                          data-astro-reload={item.title === "Contact"}
                        >
                          {item.title}
                        </a>
                      </li>
                    )}
                  </>
                ))
              }
            </ul>
            <div class="lg:hidden flex items-center mt-3 gap-4">
              <Link
                href="https://app.ontum.co"
                target="_blank"
                rel="noopener"
                style="muted"
                block
                size="md"
              >
                Log in
              </Link>
              <Link
                href="https://app.ontum.co"
                target="_blank"
                rel="noopener"
                size="md"
                block
              >
                Sign up
              </Link>
            </div>
          </MenuItems>
        </Astronav>
        <div>
          <div class="hidden lg:flex items-center gap-4">
            <a href="https://app.ontum.co" target="_blank" rel="noopener">
              Log in
            </a>
            <Link
              href="https://app.ontum.co"
              target="_blank"
              rel="noopener"
              size="md"
            >
              Sign up
            </Link>
          </div>
        </div>
      </div>
    </header>
  </div>
</Container>
